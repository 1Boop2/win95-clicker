<?php
declare(strict_types=1);
require_once __DIR__ . '/../config.php';
require_once __DIR__ . '/econ.php';
require_once __DIR__ . '/rate_limit.php';

/** --- –°—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–æ–π) --- */
function ensure_stats(int $uid): void {
  $pdo = db();
  $pdo->prepare("INSERT IGNORE INTO stats (user_id, total_clicks, balance, best_cps, last_update_ts, auto_carry)
                 VALUES (?,?,?,0,?,0)")
      ->execute([$uid, 0, 0, microtime(true)]);
}

/** --- –°–∏–¥ —Å—Ç–∞—Ä—ã—Ö –∞–ø–≥—Ä–µ–π–¥–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–æ–π, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) --- */
function seed_upgrades(): void {
  $pdo = db();
  $rows = [
    ['m_mouse95','–ú—ã—à—å 95','–°—Ç–∞—Ä–∞—è –¥–æ–±—Ä–∞—è –º—ã—à—å. +50% –∫ –∫–ª–∏–∫—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','manual',10,1.15,0.50,1.00],
    ['m_oil','–°–º–∞–∑–∫–∞ –∫–æ–ª—ë—Å–∏–∫–∞','–ö–æ–ª–µ—Å–æ –∫—Ä—É—Ç–∏—Ç—Å—è ‚Äî –∫–ª–∏–∫–∏ –º—É—Ç—è—Ç—Å—è. +100% –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','manual',100,1.18,1.00,1.00],
    ['m_driver','–î—Ä–∞–π–≤–µ—Ä-–ø–∞–∫ 3.1','–°—Ç–∞–≤–∏–º –¥—Ä–∞–π–≤–µ—Ä–∞ ‚Äî –∫–ª–∏–∫–∏ –ª–µ—Ç—è—Ç. +150% –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','manual',750,1.20,1.50,1.00],
    ['m_vga','–¢—É—Ä–±–æ-VGA','–í–∏–¥–µ–æ–ø–∞–º—è—Ç—å —É—Å–∫–æ—Ä—è–µ—Ç —Ä—É–∫—É. +200% –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','manual',5000,1.22,2.00,1.00],
    ['m_oc','–†–∞–∑–≥–æ–Ω –ü–µ–Ω—Ç–∏—É–º–∞','–ù–µ–º–Ω–æ–≥–æ –¥—ã–º–∫–∞ ‚Äî –º–Ω–æ–≥–æ –∫–ª–∏–∫–æ–≤. +300% –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','manual',20000,1.25,3.00,1.00],
    ['m_winmm','WinMM API','–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–≤—É–∫–∏ —É—Å–∫–æ—Ä—è—é—Ç —Ä—É–∫—É. +400%/—É—Ä.','manual',80000,1.27,4.00,1.00],
    ['m_mouse_laser','–õ–∞–∑–µ—Ä–Ω–∞—è –º—ã—à—å','–õ—É—á–∏ –∫–ª–∏–∫–∞. +700%/—É—Ä.','manual',240000,1.28,7.00,1.00],
    ['m_usb','USB 1.1','–ü–æ–¥–∫–ª—é—á–∏ ‚Äî –∏ –ø–æ–ª–µ—Ç–µ–ª–∏. +1000%/—É—Ä.','manual',500000,1.30,10.00,1.00],
    ['m_dx','DirectX 3','–ì—Ä–∞—Ñ–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–∫–∞—Ç—å. +1500%/—É—Ä.','manual',1500000,1.32,15.00,1.00],
    ['m_timewarp','–¢–∞–π–º–≤–æ—Ä–ø','–í—Ä–µ–º—è –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. +2500%/—É—Ä.','manual',6000000,1.35,25.00,1.00],
    ['a_cursor','–ö—É—Ä—Å–æ—Ä-–±–æ—Ç','–ê–≤—Ç–æ–∫–ª–∏–∫–∏ –ø–æ 0.1/—Å–µ–∫ –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','auto',25,1.15,0.10,1.00],
    ['a_macro','MacroRecorder','–ó–∞–ø–∏—à–µ–º –∫–ª–∏–∫ ‚Äî —É–º–Ω–æ–∂–∏–º. +1/—Å–µ–∫ –∑–∞ —É—Ä–æ–≤–µ–Ω—å.','auto',250,1.17,1.00,1.00],
    ['a_net','–°–µ—Ç–µ–≤–æ–π –∫–ª–∏–∫–µ—Ä','LAN-—Ñ–µ—Ä–º–∞ –¥–∞—ë—Ç +10/—Å–µ–∫.','auto',2500,1.20,10.00,1.00],
    ['a_corp','–ö–æ—Ä–ø-–±–æ—Ç','–û—Ñ–∏—Å–Ω—ã–µ –ü–ö –ø–æ–º–æ–≥–∞—é—Ç: +50/—Å–µ–∫.','auto',10000,1.22,50.00,1.00],
    ['a_ai','–ò–ò-–∫–ª–∏–∫–µ—Ä','–ù–µ–º–Ω–æ–≥–æ –ò–ò ‚Äî +250/—Å–µ–∫.','auto',50000,1.25,250.00,1.00],
    ['a_factory','–ö–ª–∏–∫-—Ñ–∞–±—Ä–∏–∫–∞','+500/—Å–µ–∫.','auto',120000,1.23,500.00,1.00],
    ['a_cluster','–ö–ª–∞—Å—Ç–µ—Ä –ü–ö','+2500/—Å–µ–∫.','auto',600000,1.24,2500.00,1.00],
    ['a_datacenter','–î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä','+10000/—Å–µ–∫.','auto',2500000,1.25,10000.00,1.00],
    ['a_cloud','–û–±–ª–∞–∫–æ –∫–ª–∏–∫–æ–≤','+50000/—Å–µ–∫.','auto',10000000,1.26,50000.00,1.00],
    ['a_quantum','–ö–≤–∞–Ω—Ç-–∫–ª–∏–∫–µ—Ä','+200000/—Å–µ–∫.','auto',60000000,1.28,200000.00,1.00],
    ['a_multiverse','–ú—É–ª—å—Ç–∏-–≤—Å–µ–ª–µ–Ω–Ω–∞—è','+1000000/—Å–µ–∫.','auto',250000000,1.30,1000000.00,1.00],
  ];
  $stmt = $pdo->prepare("INSERT IGNORE INTO upgrades (code,name,description,type,base_cost,cost_growth,base_effect,effect_growth)
                         VALUES (?,?,?,?,?,?,?,?)");
  foreach ($rows as $r) { $stmt->execute($r); }
}

/** –°—Ç–∞—Ä—ã–µ —Ö–µ–ª–ø–µ—Ä—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) */
function get_upgrades(): array {
  $pdo = db();
  $rows = $pdo->query("SELECT * FROM upgrades")->fetchAll();
  $out = [];
  foreach ($rows as $r) { $out[$r['code']] = $r; }
  return $out;
}
function get_user_upgrades(int $uid): array {
  $pdo = db();
  $stmt = $pdo->prepare("SELECT upgrade_code, level FROM user_upgrades WHERE user_id=?");
  $stmt->execute([$uid]);
  $out = [];
  foreach ($stmt as $row) { $out[$row['upgrade_code']] = (int)$row['level']; }
  $all = get_upgrades();
  $ins = $pdo->prepare("INSERT IGNORE INTO user_upgrades (user_id, upgrade_code, level) VALUES (?,?,0)");
  foreach ($all as $code => $_) { if (!isset($out[$code])) { $ins->execute([$uid,$code]); $out[$code] = 0; } }
  return $out;
}
function cost_for_level(array $up, int $level): int {
  return (int)ceil((float)$up['base_cost'] * pow((float)$up['cost_growth'], $level));
}

/** –ù–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º –°–ò–õ–£ –ö–õ–ò–ö–ê –∏ –ê–í–¢–û-CPS –ø–æ econ.php */
function compute_factors(int $uid): array {
  $pdo = db();
  $levels = econ_levels($pdo, $uid);
  $eff    = econ_effects_from_levels($levels);
  // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: manual_mult = —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞ –∫–ª–∏–∫–∞ (click_value)
  return ['manual_mult' => (float)$eff['click_value'], 'auto_cps' => (float)$eff['auto_cps']];
}

/** –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–≤—Ç–æ-–¥–æ—Ö–æ–¥–∞ (–±–µ–∑ cron), —É—á–∏—Ç—ã–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã */
function apply_auto_income(int $uid): void {
  $pdo = db();
  $pdo->beginTransaction();
  try {
    $row = $pdo->prepare("SELECT balance, total_clicks, last_update_ts, auto_carry FROM stats WHERE user_id=? FOR UPDATE");
    $row->execute([$uid]);
    $s = $row->fetch();
    if (!$s) {
      $pdo->rollBack(); ensure_stats($uid); $pdo->beginTransaction();
      $row->execute([$uid]); $s = $row->fetch();
    }
    $now  = microtime(true);
    $last = (float)$s['last_update_ts']; if ($last <= 0) $last = $now;
    $dt   = max(0.0, $now - $last);

    $f    = compute_factors($uid);
    $auto = (float)$f['auto_cps'] * $dt + (float)$s['auto_carry'];
    $add  = (int)floor($auto);
    $carry = $auto - $add;

    if ($add > 0) {
      $pdo->prepare("UPDATE stats SET balance=balance+?, total_clicks=total_clicks+?, auto_carry=?, last_update_ts=? WHERE user_id=?")
          ->execute([$add, $add, $carry, $now, $uid]);
    } else {
      $pdo->prepare("UPDATE stats SET auto_carry=?, last_update_ts=? WHERE user_id=?")
          ->execute([$carry, $now, $uid]);
    }
    $pdo->commit();
  } catch (Throwable $e) {
    if ($pdo->inTransaction()) $pdo->rollBack();
    throw $e;
  }
}

/** –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–∫–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç CPS –ø–æ –æ–∫–Ω—É 3 —Å–µ–∫ (100–º—Å –∫–æ—Ä–∑–∏–Ω—ã) */
function log_click_and_cps(int $uid, int $count): float {
  $pdo = db();
  $now_ms = (int)floor(microtime(true)*1000);
  $bucket = $now_ms - ($now_ms % 100);
  $pdo->prepare("INSERT INTO clicks_log (user_id, bucket_ms, count) VALUES (?,?,?)
                 ON DUPLICATE KEY UPDATE count = count + VALUES(count)")
      ->execute([$uid, $bucket, $count]);
  $edge = $now_ms - 3000;
  $stmt = $pdo->prepare("SELECT COALESCE(SUM(count),0) FROM clicks_log WHERE user_id=? AND bucket_ms>?");
  $stmt->execute([$uid, $edge]);
  $sum = (int)$stmt->fetchColumn();
  $cps = $sum / 3.0;
  $pdo->prepare("UPDATE stats SET best_cps = GREATEST(best_cps, ?) WHERE user_id=?")->execute([$cps, $uid]);
  return $cps;
}

/** ===== Achievements: dynamic + built-ins ===== */
function ach_builtin(): array {
  return [
    ['code'=>'ach_first_click','name'=>'–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫','desc'=>'–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫.','icon'=>'üê≠','type'=>'stat','field'=>'total_clicks','gte'=>1],
    ['code'=>'ach_10','name'=>'–†–∞–∑–≥–æ–Ω','desc'=>'10 –∫–ª–∏–∫–æ–≤.','icon'=>'üîü','type'=>'stat','field'=>'total_clicks','gte'=>10],
    ['code'=>'ach_100','name'=>'–°–æ—Ç–Ω—è','desc'=>'100 –∫–ª–∏–∫–æ–≤.','icon'=>'üíØ','type'=>'stat','field'=>'total_clicks','gte'=>100],
    ['code'=>'ach_1k','name'=>'–¢—ã—Å—è—á–∞','desc'=>'1000 –∫–ª–∏–∫–æ–≤.','icon'=>'üßÆ','type'=>'stat','field'=>'total_clicks','gte'=>1000],
    ['code'=>'ach_first_buy','name'=>'–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞','desc'=>'–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ.','icon'=>'üõí','type'=>'stat','field'=>'levels_sum','gte'=>1],
    ['code'=>'ach_5lvls','name'=>'–ê–ø–≥—Ä–µ–π–¥–æ–º–∞–Ω','desc'=>'–°—É–º–º–∞—Ä–Ω–æ 5 —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏–π.','icon'=>'‚öôÔ∏è','type'=>'stat','field'=>'levels_sum','gte'=>5],
    ['code'=>'ach_10lvls','name'=>'–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä','desc'=>'–°—É–º–º–∞—Ä–Ω–æ 10 —É—Ä–æ–≤–Ω–µ–π —É–ª—É—á—à–µ–Ω–∏–π.','icon'=>'üß∞','type'=>'stat','field'=>'levels_sum','gte'=>10],
    ['code'=>'ach_auto10','name'=>'–ú–æ—Ç–æ—Ä—á–∏–∫','desc'=>'–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∞–≤—Ç–æ-CPS = 10.','icon'=>'ü§ñ','type'=>'stat','field'=>'auto_cps','gte'=>10],
    ['code'=>'ach_auto100','name'=>'–§–µ—Ä–º–µ—Ä –∫–ª–∏–∫–æ–≤','desc'=>'–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∞–≤—Ç–æ-CPS = 100.','icon'=>'üè≠','type'=>'stat','field'=>'auto_cps','gte'=>100],
    ['code'=>'ach_cps5','name'=>'–°–ø—Ä–∏–Ω—Ç–µ—Ä','desc'=>'–õ—É—á—à–∏–π CPS ‚â• 5.','icon'=>'‚ö°','type'=>'stat','field'=>'best_cps','gte'=>5],
    ['code'=>'ach_cps20','name'=>'–†–µ–∫–æ—Ä–¥—Å–º–µ–Ω','desc'=>'–õ—É—á—à–∏–π CPS ‚â• 20.','icon'=>'üèÜ','type'=>'stat','field'=>'best_cps','gte'=>20],
    ['code'=>'ach_million','name'=>'–ú–∏–ª–ª–∏–æ–Ω–µ—Ä','desc'=>'–ë–∞–ª–∞–Ω—Å 1 000 000.','icon'=>'üí∞','type'=>'stat','field'=>'balance','gte'=>1000000],
    // Admin-only (–≤—ã–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
    ['code'=>'ach_admin_legend','name'=>'–õ–µ–≥–µ–Ω–¥–∞','desc'=>'–í—ã–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–æ–º.','icon'=>'üëë','type'=>'admin','field'=>null,'gte'=>null],
    ['code'=>'ach_admin_vip','name'=>'VIP','desc'=>'–í—ã–¥–∞–Ω–æ –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–æ–º.','icon'=>'üíé','type'=>'admin','field'=>null,'gte'=>null],
  ];
}

function ach_db_defs(): array {
  $pdo = db();
  try {
    $rows = $pdo->query("SELECT code,name,description,icon,type,field,gte FROM ach_defs")->fetchAll();
    foreach ($rows as &$r) {
      if (isset($r['description'])) { $r['desc'] = $r['description']; unset($r['description']); }
    }
    return $rows ?: [];
  } catch (Throwable $e) {
    // –ù–µ—Ç —Ç–∞–±–ª–∏—Ü—ã ach_defs ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏
    return [];
  }
}

function ach_definitions(): array {
  $base = ach_builtin();
  $db   = ach_db_defs();
  $map = [];
  foreach ($base as $d) { $map[$d['code']] = $d; }
  foreach ($db as $d)   { $map[$d['code']] = $d; }
  return array_values($map);
}

function get_user_ach_set(int $uid): array {
  $pdo = db();
  $s = $pdo->prepare("SELECT code FROM user_achievements WHERE user_id=?");
  $s->execute([$uid]);
  $set = [];
  foreach ($s as $r) { $set[$r['code']] = true; }
  return $set;
}

/** –°—É–º–º–∞ —É—Ä–æ–≤–Ω–µ–π: –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ (code,lvl) —Å fallback –Ω–∞ —Å—Ç–∞—Ä—É—é (upgrade_code,level) */
function total_upgrade_levels(int $uid): int {
  $pdo = db();
  try {
    $q = $pdo->prepare("SELECT COALESCE(SUM(lvl),0) FROM user_upgrades WHERE user_id=?");
    $q->execute([$uid]);
    $v = $q->fetchColumn();
    if ($v !== false) return (int)$v;
  } catch (Throwable $e) {}
  try {
    $q = $pdo->prepare("SELECT COALESCE(SUM(level),0) FROM user_upgrades WHERE user_id=?");
    $q->execute([$uid]);
    $v = $q->fetchColumn();
    if ($v !== false) return (int)$v;
  } catch (Throwable $e) {}
  return 0;
}

function check_achievements(int $uid): array {
  $defs = ach_definitions();
  $unlocked = get_user_ach_set($uid);

  $pdo = db();
  $s = $pdo->prepare("SELECT total_clicks, balance, best_cps FROM stats WHERE user_id=?");
  $s->execute([$uid]);
  $st = $s->fetch() ?: ['total_clicks'=>0,'balance'=>0,'best_cps'=>0];

  $eff = compute_factors($uid); // —É–∂–µ –Ω–∞ –Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ
  $levels_sum = total_upgrade_levels($uid);

  $vals = [
    'total_clicks' => (int)$st['total_clicks'],
    'balance'      => (int)$st['balance'],
    'best_cps'     => (float)$st['best_cps'],
    'auto_cps'     => (float)$eff['auto_cps'],
    'levels_sum'   => (int)$levels_sum,
  ];

  $new = [];
  $ins = $pdo->prepare("INSERT IGNORE INTO user_achievements (user_id, code) VALUES (?,?)");
  foreach ($defs as $d) {
    if (($d['type'] ?? 'stat') !== 'stat') continue; // –∞–≤—Ç–æ-–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ stat
    $code = $d['code'];
    if (!empty($unlocked[$code])) continue;
    $field = $d['field'] ?? null; $gte = (float)($d['gte'] ?? 0);
    $v = (float)($vals[$field] ?? 0);
    if ($v >= $gte) { $ins->execute([$uid,$code]); $new[] = $code; }
  }
  return $new;
}

/** –ì–ª–∞–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ */
function get_state(int $uid): array {
  apply_auto_income($uid);

  $pdo = db();
  $s = $pdo->prepare("SELECT total_clicks, balance, best_cps FROM stats WHERE user_id=?");
  $s->execute([$uid]);
  $st = $s->fetch() ?: ['total_clicks'=>0,'balance'=>0,'best_cps'=>0];

  // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–æ –Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ
  $eff    = compute_factors($uid); // manual_mult = click_value; auto_cps ‚Äî –∫–∞–∫ –µ—Å—Ç—å
  $levels = econ_levels($pdo, $uid);

  // –ê–ø–≥—Ä–µ–π–¥—ã: –±–µ—Ä—ë–º –∏–∑ econ –∏ –º–∞–ø–ø–∏–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –Ω–µ –ª–æ–º–∞—Ç—å
  $econ_list = econ_upgrades_sorted($pdo, $uid);
  $up = [];
  foreach ($econ_list as $e) {
    $type = ($e['cat'] === 'auto') ? 'auto' : 'manual';
    $cost = $e['next_cost'];
    $up[] = [
      'code'  => $e['code'],
      'name'  => $e['title'],
      'desc'  => $e['desc'],
      'type'  => $type,
      'level' => (int)$e['lvl'],
      'cost'  => ($cost === null ? PHP_INT_MAX : (int)$cost),
      'effect'=> null, // –≤ –Ω–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ —ç—Ñ—Ñ–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ñ–æ—Ä–º—É–ª–∞–º–∏
    ];
  }

  // –ê—á–∏–≤–∫–∏
  $new_ach = check_achievements($uid);
  $ach_total    = count(ach_definitions());
  $ach_unlocked = count(get_user_ach_set($uid));

  return [
    'balance'      => (int)$st['balance'],
    'total_clicks' => (int)$st['total_clicks'],
    'best_cps'     => round((float)$st['best_cps'], 2),
    'manual_mult'  => round((float)$eff['manual_mult'], 4), // = click_value
    'auto_cps'     => round((float)$eff['auto_cps'], 2),
    'upgrades'     => $up,
    'ach_total'    => $ach_total,
    'ach_unlocked' => $ach_unlocked,
  ];
}
